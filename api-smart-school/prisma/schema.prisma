// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String           @id @default(uuid()) @db.Uuid
  username      String           @db.VarChar(100)
  password      String           @db.VarChar(100)
  userRoles     UserRoles[]
  userPermision UserPermission[]
  created_at    DateTime         @default(now())
  updated_at    DateTime         @updatedAt
  StudentUser   StudentUser[]

  @@map("user")
}

model Role {
  id        Int         @id @default(autoincrement())
  name      String      @db.VarChar(100)
  UserRoles UserRoles[]

  @@map("role")
}

model UserRoles {
  user    User   @relation(fields: [user_id], references: [id])
  user_id String @db.Uuid
  role    Role   @relation(fields: [role_id], references: [id])
  role_id Int

  @@id([user_id, role_id])
  @@map("user_roles")
}

model Permission {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(100)
  UserPermission UserPermission[]

  @@map("permission")
}

model UserPermission {
  user          User       @relation(fields: [user_id], references: [id])
  user_id       String     @db.Uuid
  permission    Permission @relation(fields: [permission_id], references: [id])
  permission_id Int

  @@id([user_id, permission_id])
  @@map("user_permission")
}

model Student {
  id                   String             @id @default(uuid()) @db.Uuid
  nis                  String             @unique
  first_name           String
  middle_name          String?
  last_name            String
  birth_day            String // Consider using a Date type if storing dates
  student_parent       StudentParent      @relation(fields: [student_parent_id], references: [id])
  student_parent_id    String             @db.Uuid
  gender               String
  foto_url             String
  current_classroom_id Int?
  register_year        String
  status               String
  created_at           DateTime           @default(now())
  updated_at           DateTime           @updatedAt
  StudentClassroom     StudentClassroom[]
  StudentUser          StudentUser[]

  @@map("student")
}

model StudentUser {
  student    Student @relation(fields: [student_id], references: [id])
  student_id String  @db.Uuid
  user       User    @relation(fields: [user_id], references: [id])
  user_id    String  @db.Uuid

  @@id([student_id, user_id])
  @@map("student_user")
}

model StudentParent {
  id           String    @id @default(uuid()) @db.Uuid
  first_name   String
  last_name    String
  relationship String
  phone        String
  email        String
  address      String
  students     Student[]
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  @@map("student_parent")
}

model StudentClassroom {
  student      Student   @relation(fields: [student_id], references: [id])
  student_id   String    @db.Uuid
  classroom    Classroom @relation(fields: [classroom_id], references: [id])
  classroom_id Int

  @@id([student_id, classroom_id])
  @@map("student_classroom")
}

model Classroom {
  id               Int                @id @default(autoincrement())
  code             String
  level            String
  year_group       String             @default("active")
  status           String
  classMajor       ClassMajor         @relation(fields: [class_major_id], references: [id])
  class_major_id   Int
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  StudentClassroom StudentClassroom[]

  @@map("classroom")
}

model ClassMajor {
  id         Int         @id @default(autoincrement())
  name       String
  classrooms Classroom[]
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt

  @@map("class_major")
}
